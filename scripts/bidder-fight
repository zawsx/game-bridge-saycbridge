#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
import find_src
import requests

from core.call import Call, Pass
from core.callhistory import CallHistory
from core.board import Board
from core.suit import *
from core.position import *
import z3b.bidder
from tests.harness import expectation_line


# NOTE: This can be run against www.saycbridge.com, but that's very slow.
kbb_baseurl = 'http://localhost:8083/json/autobid'

# http://localhost:8080/json/autobid?number=11&deal%5Bnorth%5D=AK85.Q64.543.AT4&deal%5Beast%5D=J64.AK932.8.K952&deal%5Bsouth%5D=QT73.T7.QT96.J86&deal%5Bwest%5D=92.J85.AKJ72.Q73&vulnerability=NO&dealer=S

# import requests
# r = requests.get()
# r.json()

# FIXME: We should consider moving this onto Board.
def _params_for_board(board):
    return {
        'number': board.number,
        'vulnerability': board.call_history.vulnerability.name,
        'dealer': board.call_history.dealer.char,
        'calls_string': board.call_history.calls_string(),
        # FIXME: Is Requests smart enough to handle a nested dict of params?
        'deal[north]': board.deal.hand_for(NORTH).cdhs_dot_string(),
        'deal[east]': board.deal.hand_for(EAST).cdhs_dot_string(),
        'deal[south]': board.deal.hand_for(SOUTH).cdhs_dot_string(),
        'deal[west]': board.deal.hand_for(WEST).cdhs_dot_string(),
    }


class BidderFight(object):
    def __init__(self):
        self.z3b = z3b.bidder.Bidder()

    def _find_call(self, bidder, hand, call_history):
        bid = bidder.find_call_for(hand, call_history)
        if not bid:
            return Pass()
        return bid

    def _bid_board_remote(self, board):
        request = requests.get(kbb_baseurl, params=_params_for_board(board))
        return CallHistory.from_string(request.json()['calls_string'])

    def _bid_board(self, board):
        kbb_call_index = 0
        kbb_call_history = self._bid_board_remote(board)

        while not board.call_history.is_complete():
            position = board.call_history.position_to_call()
            deal = board.deal
            hand = deal.hand_for(position)
            kbb_bid = kbb_call_history.calls[kbb_call_index]
            kbb_call_index += 1
            z3b_bid = self._find_call(self.z3b, hand, board.call_history)

            if kbb_bid != z3b_bid:
                if self.ask:
                    print deal.hand_for(position).pretty_one_line()
                    print board.call_history
                    raw_input("")
                print "kbb=%s z3b=%s with %s" % (kbb_bid, z3b_bid, deal.hand_for(position).pretty_one_line())
                unittest_comment = "  # %s, %s" % (
                    board.identifier.partition(":")[0], # remove the call history
                    position.char,
                )
                print expectation_line(hand, board.call_history, expected_call=kbb_bid) + unittest_comment
                print
                return

            board.call_history.calls.append(z3b_bid)

    def main(self, args):
        self.ask = args and args[0] == '--ask'
        if self.ask:
            args = args[1:]

        if args:
            for identifier in args:
                self._bid_board(Board.from_identifier(identifier))
            return 0

        print "Using KBB at %s\n" % kbb_baseurl

        try:
            while True:
                self._bid_board(Board.random())
        except KeyboardInterrupt:
            print
            print "User interrupted."
            return 0


if __name__ == '__main__':
    BidderFight().main(sys.argv[1:])
